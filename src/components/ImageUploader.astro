---
// This is a client-side component that demonstrates how you could implement image uploading
// In a real application, you would need a server-side endpoint to handle the upload
---

<div class="bg-white rounded-lg shadow-md p-6">
  <h2 class="text-xl font-semibold mb-4">Upload Background Image</h2>
  
  <div id="dropzone" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition">
    <div class="space-y-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
      <p class="text-gray-600">Drag and drop your image here, or click to select a file</p>
      <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
    </div>
    <input type="file" id="fileInput" class="hidden" accept="image/*" />
  </div>
  
  <div id="preview" class="mt-4 hidden">
    <h3 class="text-sm font-medium text-gray-700 mb-2">Preview:</h3>
    <div class="relative">
      <img id="imagePreview" src="#" alt="Preview" class="w-full h-48 object-cover rounded-lg" />
      <button id="removeImage" class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>
  </div>
  
  <div class="mt-4">
    <button id="uploadButton" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark transition disabled:opacity-50 disabled:cursor-not-allowed" disabled>
      Upload Image
    </button>
  </div>
  
  <div id="uploadStatus" class="mt-4 hidden">
    <div class="flex items-center">
      <svg id="successIcon" class="h-5 w-5 text-green-500 mr-2 hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
      </svg>
      <svg id="errorIcon" class="h-5 w-5 text-red-500 mr-2 hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
      </svg>
      <p id="statusMessage" class="text-sm"></p>
    </div>
  </div>
  
  <div class="mt-6">
    <h3 class="text-sm font-medium text-gray-700 mb-2">Instructions:</h3>
    <ol class="list-decimal list-inside text-sm text-gray-600 space-y-1">
      <li>Upload your image using the form above</li>
      <li>Once uploaded, the image will be saved to the public/images directory</li>
      <li>You can then use the image URL in your page settings</li>
      <li>For example: <code class="bg-gray-100 px-1 py-0.5 rounded">/images/your-image.jpg</code></li>
    </ol>
  </div>
</div>

<script>
  // Get DOM elements
  const dropzone = document.getElementById('dropzone');
  const fileInput = document.getElementById('fileInput');
  const preview = document.getElementById('preview');
  const imagePreview = document.getElementById('imagePreview');
  const removeImage = document.getElementById('removeImage');
  const uploadButton = document.getElementById('uploadButton');
  const uploadStatus = document.getElementById('uploadStatus');
  const successIcon = document.getElementById('successIcon');
  const errorIcon = document.getElementById('errorIcon');
  const statusMessage = document.getElementById('statusMessage');
  
  // Handle click on dropzone
  if (dropzone) {
    dropzone.addEventListener('click', () => {
      fileInput?.click();
    });
  }
  
  // Handle drag and drop
  if (dropzone) {
    dropzone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropzone.classList.add('border-primary');
    });
    
    dropzone.addEventListener('dragleave', () => {
      dropzone.classList.remove('border-primary');
    });
    
    dropzone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropzone.classList.remove('border-primary');
      
      if (e.dataTransfer?.files.length) {
        handleFile(e.dataTransfer.files[0]);
      }
    });
  }
  
  // Handle file selection
  if (fileInput) {
    fileInput.addEventListener('change', () => {
      if (fileInput.files?.length) {
        handleFile(fileInput.files[0]);
      }
    });
  }
  
  // Handle file processing
  function handleFile(file) {
    // Check if file is an image
    if (!file.type.startsWith('image/')) {
      showStatus(false, 'Please select an image file (PNG, JPG, GIF)');
      return;
    }
    
    // Check file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      showStatus(false, 'File size exceeds 5MB limit');
      return;
    }
    
    // Show preview
    const reader = new FileReader();
    reader.onload = (e) => {
      if (imagePreview && e.target?.result) {
        imagePreview.src = e.target.result.toString();
        preview?.classList.remove('hidden');
        uploadButton?.removeAttribute('disabled');
      }
    };
    reader.readAsDataURL(file);
  }
  
  // Handle remove image
  if (removeImage) {
    removeImage.addEventListener('click', () => {
      if (fileInput) fileInput.value = '';
      preview?.classList.add('hidden');
      uploadButton?.setAttribute('disabled', 'disabled');
      uploadStatus?.classList.add('hidden');
    });
  }
  
  // Handle upload button
  if (uploadButton) {
    uploadButton.addEventListener('click', () => {
      // In a real application, you would upload the file to your server here
      // For this demo, we'll simulate a successful upload
      uploadButton.textContent = 'Uploading...';
      uploadButton.disabled = true;
      
      setTimeout(() => {
        // Simulate upload completion
        const success = Math.random() > 0.2; // 80% chance of success for demo
        
        if (success) {
          showStatus(true, 'Image uploaded successfully! You can now use it in your pages.');
        } else {
          showStatus(false, 'Upload failed. Please try again.');
          uploadButton.disabled = false;
          uploadButton.textContent = 'Upload Image';
        }
      }, 1500);
    });
  }
  
  // Show status message
  function showStatus(success, message) {
    if (uploadStatus && statusMessage && successIcon && errorIcon) {
      uploadStatus.classList.remove('hidden');
      statusMessage.textContent = message;
      
      if (success) {
        successIcon.classList.remove('hidden');
        errorIcon.classList.add('hidden');
        statusMessage.classList.remove('text-red-500');
        statusMessage.classList.add('text-green-500');
      } else {
        successIcon.classList.add('hidden');
        errorIcon.classList.remove('hidden');
        statusMessage.classList.remove('text-green-500');
        statusMessage.classList.add('text-red-500');
      }
    }
  }
</script>